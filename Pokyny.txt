01. SELECT          -    vybrat
    SELECT * FROM priklad;
02. FROM            -   z kade vybrat
03. AS              -   ako, alias
04. WHERE           -   Podmienky vyberu, "IF"
05. IS              -   JE  ???
06. IS NOT          -   NIE JE  ???
07. NULL            -   Prazdny riadok
08. LIKE            -   Ako, pouziva sa pri hladani napr. v STRINGU
09. %               -   Pouziva sa ako * v LINUXE. Najdi fakultu prirodovedecku - priro% | %ecku | %vedec%
10. ORDER BY        -   zorad podla
11. ASC             -   ASCENDING
12. DESC            -   DESCENDING
13. YEAR            -   V roku      YEAR(stlpec) = rok
14. MONTH           -   V mesiaci   MONTH(stlpec) = mesiac
15. AND
16. OR
17. DISTINCT        -   Unikatne, jedonecne vo vybere zp stlpcov
18. LIMIT           -   Obmedzit zobrazovanie na
---------------------------------------------------------------------
19. AVG             -   vypocita priemer
20. MIN             -   ukaze minimum
21. MAX             -   ukaze maximum
22. COUNT           -   kolko riadkov sa nachadza v stlpci ; pocet numerickych hodnot ve sloupci
23. SUM             -   Spocita stlpec
24. ROUND           -   Zaokruhli
                    -   ROUND(number, decimals, operation) - number - cislo     - ktore zaokruhli
                                                                    - decimals  - na kolko zaokruhli
                                                                    - operatioo - optional
                    -   SELECT ROUND(235.415, -1) AS RoundValue;    240.000 |   %1) 235.400
25. LENGTH          -   LEN  LENGTH(premenna)
26. SUBSTR          -   rez stringu     SUBSTR(string, start, lemgth)
                                    SUBSTR(string FROM start FOR length)
27. REVERSE         -   otoci string    REVERSE(string)
28. CEILING         -   ak cislo je nad 0.01 ide hore na 1 ak je zacate zaokruhluje hore  CEILING(number)
29. MD5
30. SHA1            -
31. CONCAT          -   aj v jave. Prida do seba string
32. LEFT(string, nu,ber of characters)            -   zoberie 3 znaky z lava  SELECT LEFT('SQL Tutorial', 3) AS ExtractString;    SQL
33. RIGHT           -   zoberie 3 znaky z prava SELECT RIGHT('SQL Tutorial', 3) AS ExtractString;   ial
34. GROUP BY        -   zoskup podla  SELECT;FROM;WHERE;GROUP_BY;ORDER_BY
35. HAVING          -   WHERE ale v agregacnych. Podmienka if.  SELECT;FROM;GROUP_BY;HAVING
---------------------------------------------------------------------
36. INNER JOIN * ON -   umožňuje spájanie tabuliek podobne ako klauzula WHERE, do výsledku budú zahrnuté iba riadky, ktoré spĺňajú podmienku spájania,
37. OUTER JOIN      -    umožňuje spájanie tabuliek na základe definovanej podmienky spojenia, zatiaľ čo výsledok bude obsahovať nielen dáta, ktorá splnili definovanú podmienku, ale aj dáta, ktoré nezodpovedajú spojovacej podmienke,
    NATURAL JOIN a
    JOIN USING      -   umožňujú spájanie tabuliek na základe rovnakých názvov stĺpcov tabuľky,
38. CROSS JOIN      -   umožňuje explicitné vytváranie kartézského súčinu.
OUTER JOIN
                    -   Existujú určité špecifické situácie, ktoré vyžadujú, aby sa zobrazovali aj hodnoty z prvej tabuľky zahrnuté v spojení, ktoré nemajú zodpovedajúce hodnoty v druhej tabuľke. Z tohto dôvodu bola do SQL pridaná klauzula OUTER JOIN. Zachováva riadky, ktoré vo výsledku nespĺňajú podmienku spojenia. Nasledujúce tri typy vonkajšieho spojenia možno použiť na základe požiadaviek, ktoré dáta tabuľky musia byť zahrnuté do výsledku otázky:
39. LEFT OUTER JOIN       - výsledok bude obsahovať všetky dáta z ľavej tabuľky (prvá tabuľka v dotaze) a zodpovedajúce dáta z pravej tabuľky (druhá v dotaze). Ak v druhej tabuľke nie je zodpovedajúca hodnota, platí namiesto nej hodnota null.
40. RIGHT JOIN      -   výsledok bude obsahovať všetky dáta z pravej tabuľky (druhá tabuľka v dotaze) a zodpovedajúce dáta z ľavej tabuľky (prvý v dotaze). Ak v ľavej tabuľke nie j zodpovedajúca hodnota, platí namiesto nej hodnota null.
    FULL OUTER JOIN - výsledok bude obsahovať všetky dáta z ľavej a pravej tabuľky, v ktorej je podmienka spojenia pravdivá. Navyše pridá všetky ďalšie riadky z oboch tabuliek, v ktorých chýba zodpovedajúca hodnota v spojenej tabuľke. Vo všetkých týchto prípadoch bude použitá hodnota null.
41. CREATE          -
42. INSERT          -
43. UPDATE          -
44. DELETE          -

45.	IN
46. ANY     -   Akykolvek aspon jednu  ||
    ALL - A zaroven && ktorakolvek
47. SOME    -   Nejaky

48. CREATE TABLE "nazov tabulky"(

    id                    INT PRINARY KEY
    first_name  VARCHAR(max_pocet znakov)   NOT NULL
    last_name   VARCHAR(max_pocet znakov)   NOT NULL
    Email              VERCHAR(100)  UNIQUE
    Start Contrat   DATE
    Suma            DECIMAL(10[najviac 10 miest],2)
    id_dep      INT     FOREIGN KEY department (id)

49.

DAYNAME
50. FLOOR           -   vracia najväčšiu celočíselnú hodnotu, ktorá nie je väčšia ako argument
51. CEIL             -   vracia najmenšiu celočíselnú hodnotu, ktorá nie je menšia ako argument
52. MOD             -   vracia zvysok %
53. ABS             -   vracia absolútnu hodnotu
54. INSTR()
55. LOCATE()
56. POSITION        -   nájdenie výskytu reťazca v inom reťazci
57. LOWER
    LCASE
    UPPER
    UCAS            -   zmena velkosti posmen
58. TRIM
    LPAD
    RPAD            -   orezové alebo výplňové reťazce
59. CURDATE()
    NOW()
    SYSDATE()       -   poskytovanie informácií o aktuálnom dátume a čase
60. DAY()
    MONTH()
    YEAR()
    EXTACT()        -   extrakcie časti dátumu
61. DATA
    DATA_FORMAT()   -   formátovanie dátumu a času
62. ADDATE()
    DATEDIFF()      -   výpočty s dátami
63. IF
    CASE    CASE<>END
64. IFNULL()
    NULLIF()

65. Modelovanie
        1 : 1 - inštancie oboch entít vstupujú do vzťahu maximálne raz,
        1 : N - inštancia jednej entity vstupuje do vzťahu maximálne raz, zatiaľ čo inštancia druhej entity môže do vzťahu vstúpiť viackrát,
        M : N - inštancie oboch entít môžu do vzťahu vstupovať viackrát.
